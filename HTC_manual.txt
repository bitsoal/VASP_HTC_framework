HTC Manual of Big Lab
author: Yang Tong
email: bitsoal@gmail.com

created on Feb 23, 2018
modified on Feb 27, 2018

We adopt the terminologies below from pymatgen, atomate.
	-firetask: A Firetask is an atomic computing job.
		For example:
			-copy files
			-move files
			-remove files
			-prepare VASP input files based on pymatgen
			-modify INCAR
			-modify KPOINTS
			-submit VASP jobs
			-kill VASP jobs
			-fix some common errors, i.e. ionic divergence, electronic divergence, positive energy.
	-firework: A firework is a series of firetaks. Normally, it is composed of three types of firetasks w.r.t the VASP calculation
		pre-process: setup VASP input files.
				- They can be copied or moved from previous step calucations.
				- They can be generated by pymatgen from scratch.
			Once VASP input files are prepared via either ways above, they need to be modified so that they are finally appropriate for the target VASP calculation.
		post-process: actions made after the VASP calculations. Note that currently, this section is not ready.
		job-management: related to job submissions, queries or terminations. 
		Note that in fact, job submissions queries, or terminations will be realized via signal files (see below). The main jobs for a firework are the pre-process and post-process.
	-workflow: A workflow is a set of fireworks with dependencies between them. 
		For example:
			- CHGCAR from scf will be required for DOS or band structure calculations.
			- It is common that the addition of dipole corrections likely leads to the electronic divergence. 
				So CHGCAR may required from a previous calculation without dipole correction.
			- For HSE06 calculations, PBE WAVECAR are required.
You may refer to https://hackingmaterials.github.io/atomate/creating_workflows.html#creating-workflows for more detailed definitions.
		
			
Let's assume the HTC workflow setup is saved into a file named HTC_calculation_setup and besides cif files, this is the only file you need to specify.
What follows is how to setup a workflow in HTC_calculation_setup

Orgnizations:
	- HTC_calculation_setup consists of a set of blocks, namely fireworks
	- Every firework starts from the line which begins with '**start', and ends up with the line which begins wtih '**end'
	- In a firework
		- pre-processes and post-processes are defined in a key-value manner wtih the equal sign '=' linking them.
		- There is an exception that inside a firework, there is a sub-block. This sub-block starts from the line whicj begins with '*begin(add_new_incar_tags)'
			and it ends with the line which begins with '*end(add_new_incar_tags)'. In this sub-block, you can overwrite INCAR tags or add new INCAR tags just like you are writing INCAR.
		- In addition, job submissions, queries or terminations will also need to be specified in a key-value manner.
		Note that in the first firework, some job management tags must be set and these setting will be used for the whole workflow:
			- the command to query a job status from a queue system.
			- the command to kill a running job
			- the file which hosts the queue id, say job_id
			- the regular expression to parse the queue id from file job_id
			- the new name of vasp.out if the job submission cmd in the submission script looks like 'mpirun -n 16 vasp_std > xxx'
			- the prefix and suffix of the stdout file generated by the queue system after the calculation.
			- the prefix and suffix of the stderr file generated by the queue system after the calculation.
		other tags that must be specified in the first firework:
			- forece_gamma: if the kpoints are forced to be gamma-centered.
			- 2d_system: for 2D systems, KPOINTS will be modified so that K_z is zero for all kpoints.


Tag list:

- step_no (integer), required for every firework.
	for the n-th firework, step_no must be n.

- cal_name (str), required for every firework.
	numbers, alphabets and underscores are valid symbols. Note that the space between word will be replaced with an underscore.
	Together with step_no, a folder named "step_" + step_no + "_" + cal_name will be created. Under this folder, the VASP calculation will be carried out.
	e.g. if step_no=4, cal_name=band str, then the folder name is "step_4_band_str"

- copy_from_prev_cal, optional.
	the right hand side of '=' should one or more than one files that will copied from the previous calculation.
	If more thant one files are specified, separate them via commas
	This is one way to set up VASP input files.
	If copy_which_step is not set, the previous calculation means the 'nearest' previous calculation.
	Default: empty

- move_from_prev_cal, optional.
	same as copy_from_prev_cal but those specified files will be moved instead of being copied from the firework specified by copy_which_step.
	Default: empty

- contcar_to_poscar (bool), optional.
	Whether to copy the POSCAR from the firework specified by copy_which_step and rename it as POSCAR.
	If this tag is Yes, the CONTCAR from the previous calculation will be implicitly copied and 
	renamed as POSCAR, even though CONTCAR does not in the files specified by tags copy_from_prev_cal or
	move_from_prev_cal
	Default: No

- copy_which_step (integer), optional.
	This will specify where to copy the files listed in copy_from_prev_cal.
	Default: the step_no of the 'nearest' previous calculation.

- remove_after_cal, optional.
	the right hand side of '=' should one or more than one files that will removed after the calculation defined in this firework.
	While using this tag, make sure that those specified files will not be needed for later calculations.
	Default: empty

- extra_copy, optional.
	This tag allows you to copy files which are not in the previous firework folders.
	If more than one files are specified, separate them via commas.
	The copy action defined by this tag is carried out earlier than the copy/move actions defined 
	by copy_from_prev_cal, move_from_prev_cal. So it is before the modifications on vasp input files.
	Note that the absolute path should be given.
	
- final_extra_copy, optional.
	This tag allows you to copy files which are not in the previous firework folders.
	If more than one files are specified, separate them via commas.
	The copy action defined by this tag is carried out AFTER the modifications on vasp input files.
	Note that the absolute path should be given.
	Why this tag?
		This tag is useful especially for the first firework. By default, the vasp input files 
		for the first firework are generated by pymatgen.io.vasp.sets.MPRelaxSet. Then you can
		adjust the input files through tags like comment_incar_tags, remove_incar_tags, or 
		add_new_incar_tags sub-blocks, denser_kpoints. 
		But you may sometimes only need POSCAR generated by pymatgen based on the given cif file 
		and want to provide INCAR, KPOINTS, or POTCAR yourself.

- comment_incar_tags, optional.
	a set of VASP INCAR tags that are separated by commas if more than more and will be commented.
	Default: empty

- remove_incar_tags, optional.
	a set of VASP INCAR tags that are separated by commas if more thant more one and will be removed from INCAR.
	Default: empty

- add_new_incar_tags sub-block, optional
	start from the line which starts with '*begin(add_new_incar_tags)'; end up with the line which starts with '*end(add_new_incar_tags)'
	In between the starting line and endling line, just specify INCAR tags as if you are writing INCAR.
	If an INCAR tag is already in the old INCAR, this tag will be overwritten.
	If an INCAR tag is not in the old INCAR, this tag will be added.

- kpoints_type, case sensitive
	options: MPRelaxSet, MPStaticSet, MPNonSCFSet_line, MPNonSCFSet_uniform
		- MPRelaxSet: The KPOINTS generated by pymatgen.io.vasp.sets.MPRelaxSet
		- MPStaticSet: The KPOINTS generated by pymatgen.io.vasp.sets.MPStaticSet
		- MPNonSCFSet_line: The KPOINTS generated by pymatgen.io.vasp.sets.MPNonSCFSet in the line mode --> band structure
		- MPNonSCFSet_uniform: The KPOINTS generated by pymatgen.io.vasp.sets.MPNonSCFSet in the uniform mode --> In pymatgen, this type of KPOINTS is for DOS calculations.
	Note that this tag will be ignored if KPOINTS is found in this firework folder by copying, moving. 
	Otherwise, this tag must be specified

- denser_kpoints (float), optional.
	This tag is only valid for the KPOINTS generated at kpoints_type = MPRelaxSet, MPStaticSet.
	Suppose the divisions in the reciprocal space are nk_x, nk_y, nk_z.
	If it is not 1, say float_no, then the new divsions are int(nk_x*float_no), int(nk_y*float_no), int(nk_z*float_no)
	Default: 1


- reciprocal_density (integer), optional.
	This tag is only valid at kpoints_type=MPNonSCFSet_uniform
	Default: 1000 <--- the value adopted by atomate's firework NonSCFFW

- kpoints_line_density (integer), optional.
	This tag is only valid at kpoints_type=MPNonSCFSet_line
	Default: 40 <-- the default value for atomate's firework NonSCFFW is 20

- froce_gamma, optional.
	This tag can be set only in the first firework and this setting will be applied to the whole workflow.
	Yes: force the kpoints to be gamma-cented.
	No: no such constraint.
	Default: No

- 2d_system, optional
	This tag can be set only in the first firework and this setting will be applied to the whole workflow.
	Yes: modify kpoints such that K_z is zero for all kpoints.
	No: no such modification on kpoints.
	Default: No
	
- sort_structure, optional.
	This tag is only valid for the first firework.
	Note that this tag functions right only when the structure is given in the format of POSCAR, not cif.
	Yes: Sort sites by the electronegativity of the atomic species.
	No: After pymatgen.io.vasp.sets.MPRelaxSet write the vasp input files for the first firework, POSCAR
		will be overwritten by copying the given structure to the current firework folder.
	Default: Yes
	Why we need this tag?
		In some cases, the atomic sites may be ordered carefully for some specific purposes.
		So you may not want to change the atomic sites.

	

Below are tags related to job managements:
- job_submission_script, required for every firework.
	Note that the absolute path will be used.


- job_submission_command, required for every firework.
	e.g. On GRC, suppose the job submission script refered by job_submission_script tag is called vasp.lsf and this tag can be "bsub < vasp.lsf > job_id"
		Where job_id will host the queue id and will be the value of tag where_to_parse_queue_id

- where_to_parse_queue_id, required only for the first firework.
	a file from which the queue id will be parsed.
	e.g. If the job submission cmd is "bsub < vasp.lsf > job_id", it is job_id

- re_to_parse_queue_id, required only for the first firework.
	the regular expression used by python re.findall to parse queue id from the file specified by where_to_parse_queue_id.
	Just make sure this regular expression is well desgined so that no other string in the file where_to_parse_queue_id can be matched.
	On GRC, it is <([0-9]+)>

- job_query_command, required only for the first firework.
	On GRC, it is bjobs@-w where @ is used to denote space.

- job_killing_command, required only for the first firework.
	On GRC, it is bkill.

- queue_stdout_file_prefix, queue_stdout_file_suffix, queue_stderr_file_prefix, queue_stderr_file_suffix
	Required for the first firework.
	Normally, when the calculation is done, the queue system will generate two files reporting errors and summarizing this work. Let's denote them as stdout, stderr.
	The two files are useful for their presence indicates that the job is done. If no error is detected for this step, the post-process will be made and the next firework will be carried out.
	These four tags are set to search for stdout and stderr files.
	Note that you need to specify at least one of the four tags:
		- Sometimes the queue stdout and stderr files will join together, giving a single file. In this case, this single file is the target file.
			You can set its prefix or suffix using either (queue_stdout_file_prefix, queue_stdout_file_suffix) or (queue_stderr_file_prefix, queue_stderr_file_suffix)
		- For either queue stdout or stderr files, it may only have a fixed prefix or a fixed suffix. In this case, you just need to specify the fixed one for the queue file.
			e.g. for lsf.o1234, just set queue_stdout_file_prefix = lsf.o
			e.g. for 1234pbs.e, just set queue_stderr_file_suffix = pbs.e

- vasp.out, required only for the first firework.
	e.g. If the vasp submission cmd is "mpirun -n 16 vasp_std > out", then vasp.out is out
	e.g. If the vasp submission cmd is "mpirun -n 16 vasp_std", then vasp.out is vasp.out



######################################################################################################################################

When the workflow is running, some signal file will be present in every firework folder. The program will repond to these signal files as below.
- __vis__: The program will prepare the vasp input files according to the workflow. Once it is done, __vis__ --> __ready__
- __ready__: The program will sbumit the job by using the command defined in the workflow. Once submitted, __ready__ --> __running__
- __prior_ready__: The program will first submit the jobs with this signal file compared to those denoted by __ready__
- __running__: The program will check the errors on the fly, e.g. If at the end of the electronic step, the positive energy is detected or the electronic convergence is reached.
		If the errors mentioned above are detected, __running__ --> __error__ and write the error type into __error__
- __error__: The program will kill the job. Once it is done, __error__ --> __killed__
- __killed__: The program will try to fix the error. If successful, __killed__ --> __ready__; otherwise __killed__ --> __manual__
- queue system's stdout and stderr: The program will think the job is done and all error checkers will be called to check errors. If any errors is found, __running__ --> __error__; Otherwise, __running__ --> __done__
- __manual__: The program cannot fix the error and the error should be fixed manually.
- __bad_termination_: When the job fails due to the error "=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES" happens in vasp.out for the first time, 
						the program will submit the job automatically and create this signal file. When such error happens again, the presence of this signal file
						tells the program this is the second time to encounter such error. In this case, the program cannot handle this error anymore, rename __killed__ --> __manual__.


Note that when you manually fix an error or tune VASP input files under a filework folder, DO remove these signal tags so that the program has nothing to do with this firework folder. After modifications, you have two ways to bring it back to the program scope:
- If you want to manually submit the job:
	-step I: remove OUTCAR, OSZICAR, vasp.out, queue stdout & stderr files.
	-step II: submit the job
	-step III: create the signal file __running__.
- If you want the program to do the job submission:
	- All you need to do is to create the signal file __ready__
- The second way is recommended.
