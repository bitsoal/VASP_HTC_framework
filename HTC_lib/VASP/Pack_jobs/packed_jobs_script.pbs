#!/bin/sh
#PBS -q normal
#PBS -N "packed_jobs"
#PBS -l select=25:ncpus=24:mpiprocs=24:ompthreads=1:mem=96g
#PBS -l walltime=24:00:00
##PBS -j oe
#PBS -l place=scatter

#########################################################################################################################################
#Applicable to the PBS batch scheduler
#This script requests a large amount of CPUs and memories, and re-allocate them to a certain number of packed jobs (VASP calculations).
#step 1. set PBS parameters above. In this case, we request 25 nodes, 24 cores/per node and 96 g per node.
#step 2. change the below paramters to set how many of CPUs should be allocated to each packed job (no_of_cpus_per_job) and the maximum
#	number of packed jobs running simultaneously (max_no_of_running_jobs)
#step 3. prepare a file named packed_cal_list and put it in the folder where this script is executed. Each line of packed_cal_list MUST BE
#	a VALID absolute path to a to-be-packed calculation. This script will read the calculation path and submit the VASP calculation
#	one by one
#Note 1: Before you apply this packed job submission script to the real calculatoins of your interest, please test this script by requesting 
#	and re-allocating a small amount of resources to a few small VASP calculations
#Note 2: In principle, this script is supposed to be able to read all calculation paths in packed_cal_list, including those which you
#	append to packed_cal_list after this script is running. 
#Note 3: We suggest you to create a signal file __packed__ under the folder of each to-be-packed calculations. When the packed VASP calculation
#	is running, the script will change __packed__ to __packed_running__. Then, __packed_running__ will be changed to __running__ if 
#	the VASP calculation is finished before running out of the walltime. The point is that the VAPS calculation tagged by __running__
#	is able to be handled by the VASP_HTC_framework (https://github.com/bitsoal/VASP_HTC_framework/tree/upgrade_to_python_3)
#########################################################################################################################################

no_of_cpus_per_job=24
max_no_of_running_jobs=25
log_filename=${PBS_O_WORKDIR}/summary_of_packed_jobs #No need to change this variable. You will see what it is once this script is running
submitted_jobs=${PBS_O_WORKDIR}/summary_of_submitted_jobs #No need to change this variable. You will see what it is once this script is running


module purge
module load VASP/5.4.4-intel-2018b_vdw_2drelax


# change directory to the one where the job was submitted
cd ${PBS_O_WORKDIR}
if [ ! -e packed_cal_list ]
then
	echo 
	echo Cannot find a file named packed_cal_list
	echo "We expect this file is in the folder where the current script is executed."
	echo "Remember each line of this file should be the absolute to a calculation. Exit..."
	echo
	exit 1
else
	line_index_of_last_job=`cat packed_cal_list | wc -l`
	line_index=1
	while [ $line_index -le $line_index_of_last_job ]
	do
		cal_path=`head -n ${line_index} packed_cal_list | tail -n 1`
		if [ -z $cal_path ] || [ ! -d $cal_path ]
		then
			echo
			echo "The calculation path at line ${line_index} doesn't exist."
			echo "Each line of packed_cal_list should be a valid calculation path. Exit..."
			echo
			exit 1
		fi
		line_index=$(($line_index + 1))
	done
fi


if [ -e ${submitted_jobs} ]
then
	rm ${submitted_jobs}
fi


index_of_next_ready_job=1
while [ ${index_of_next_ready_job} -le `cat packed_cal_list | wc -l` ]
do
	no_of_running_jobs=`jobs | wc -l`
	sleep_for_a_while=false

	cal_path=`head -n ${index_of_next_ready_job} packed_cal_list | tail -n 1`
	
	if [ ${no_of_running_jobs} -lt ${max_no_of_running_jobs} ]
	then
		cd $cal_path
		echo ${PBS_JOBID} > job_id
                mv __packed__ __packed_running__
		mpirun -np ${no_of_cpus_per_job} vasp_std > out && touch ${PBS_JOBNAME}.o && touch ${PBS_JOBSNAME}.e && mv __packed_running__ __running__&
		echo ${cal_path} >> ${submitted_jobs}
		cd ${PBS_O_WORKDIR}
		index_of_next_ready_job=$(($index_of_next_ready_job + 1))
	else
		sleep_for_a_while=true
	fi

	date > $log_filename
	jobs >> $log_filename

	if $sleep_for_a_while
	then
		sleep 1
	fi
done


#wait for the rest to be finished
wait

date > $log_filename
echo "All done" >> $log_filename
